import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";

const allCities = [
  "–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å",
  "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥", "–ß–µ–ª—è–±–∏–Ω—Å–∫", "–°–∞–º–∞—Ä–∞", "–û–º—Å–∫", "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É",
  "–£—Ñ–∞", "–ö—Ä–∞—Å–Ω–æ—è—Ä—Å–∫", "–ü–µ—Ä–º—å", "–í–æ—Ä–æ–Ω–µ–∂", "–í–æ–ª–≥–æ–≥—Ä–∞–¥",
  "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "–°–∞—Ä–∞—Ç–æ–≤", "–¢—é–º–µ–Ω—å", "–¢–æ–ª—å—è—Ç—Ç–∏", "–ò–∂–µ–≤—Å–∫",
  "–ë–∞—Ä–Ω–∞—É–ª", "–£–ª—å—è–Ω–æ–≤—Å–∫", "–ò—Ä–∫—É—Ç—Å–∫", "–•–∞–±–∞—Ä–æ–≤—Å–∫", "–Ø—Ä–æ—Å–ª–∞–≤–ª—å",
  "–í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫", "–ú–∞—Ö–∞—á–∫–∞–ª–∞", "–¢–æ–º—Å–∫", "–û—Ä–µ–Ω–±—É—Ä–≥", "–ö–µ–º–µ—Ä–æ–≤–æ"
];

const products = [
  { id: 1, name: "–ö–æ—Ä–∏—Ü–∞", price: "200‚ÇΩ", available: true, logo: "üü´" },
  { id: 2, name: "–ö—É—Ä–∫—É–º–∞", price: "150‚ÇΩ", available: true, logo: "üü®" },
  { id: 3, name: "–ö–∞—Ä–¥–∞–º–æ–Ω", price: "300‚ÇΩ", available: false, logo: "üü©" },
  { id: 4, name: "–ò–º–±–∏—Ä—å", price: "180‚ÇΩ", available: true, logo: "üüß" },
  { id: 5, name: "–ì–≤–æ–∑–¥–∏–∫–∞", price: "220‚ÇΩ", available: true, logo: "üü•" }
];

const cityDistricts = {
  "–ú–æ—Å–∫–≤–∞": ["–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π", "–°–µ–≤–µ—Ä–Ω—ã–π", "–°–µ–≤–µ—Ä–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π", "–í–æ—Å—Ç–æ—á–Ω—ã–π", "–Æ–≥–æ-–í–æ—Å—Ç–æ—á–Ω—ã–π"],
  "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": ["–ê–¥–º–∏—Ä–∞–ª—Ç–µ–π—Å–∫–∏–π", "–í–∞—Å–∏–ª–µ–æ—Å—Ç—Ä–æ–≤—Å–∫–∏–π", "–í—ã–±–æ—Ä–≥—Å–∫–∏–π", "–ö–∞–ª–∏–Ω–∏–Ω—Å–∫–∏–π", "–ü–µ—Ç—Ä–æ–≥—Ä–∞–¥—Å–∫–∏–π"],
  "–ö–∞–∑–∞–Ω—å": ["–í–∞—Ö–∏—Ç–æ–≤—Å–∫–∏–π", "–ö–∏—Ä–æ–≤—Å–∫–∏–π", "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π", "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π", "–°–æ–≤–µ—Ç—Å–∫–∏–π"]
};

const phrases = [
  "–ö—É–ø–∏ —Å–ø–µ—Ü–∏–∏ –≤ —Å–≤–æ–µ–º –≥–æ—Ä–æ–¥–µ",
  "–ì–æ—Ç–æ–≤—å –Ω–∞ –º–∞–∫—Å–∏–º–∞–ª–∫–∞—Ö",
  "–†–∞–∑–≤–∏–≤–∞–π –∫—É—Ö–æ–Ω–Ω—ã–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏",
  "–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∏ –ª—É—á—à–∏–µ –Ω–∞ —Ä—ã–Ω–∫–µ",
  "–£–¥–∏–≤–∏ —Ä–æ–¥–Ω—ã—Ö, –ø—Ä–∏–≥–æ—Ç–æ–≤—å –∏–∑—ã—Å–∫–∞–Ω–Ω–æ–µ"
];

function MainPage() {
  const navigate = useNavigate();
  const [currentPhrase, setCurrentPhrase] = useState(0);
  const [animate, setAnimate] = useState(true);
  const [selectedCity, setSelectedCity] = useState(null);
  const [showProducts, setShowProducts] = useState(false);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [showDistricts, setShowDistricts] = useState(false);

  useEffect(() => {
    const interval = setInterval(() => {
      setAnimate(false);
      setTimeout(() => {
        setCurrentPhrase((prev) => (prev + 1) % phrases.length);
        setAnimate(true);
      }, 500);
    }, 3000);

    return () => clearInterval(interval);
  }, []);

  const handleCityClick = (city) => {
    setSelectedCity(city);
    setShowProducts(true);
    setSelectedProduct(null);
    setShowDistricts(false);
  };

  const handleBuyClick = (product) => {
    setSelectedProduct(product);
    setShowDistricts(true);
  };

  return (
    <div className="min-h-screen flex flex-col items-center p-5 bg-gradient-to-b from-orange-50 to-white">
      <header className="w-full bg-gradient-to-r from-black to-orange-600 p-4 mb-6 rounded-lg shadow-xl">
        <div className="flex flex-col items-center">
          <div className="w-full flex justify-between items-center mb-3">
            <div className="flex space-x-4">
              <NavButton icon="üõí" text="–¢–æ–≤–∞—Ä—ã" />
              <NavButton icon="‚úîÔ∏è" text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–∫–∞–∑–∞" />
              <NavButton icon="üí¨" text="–û—Ç–∑—ã–≤—ã" />
            </div>
            
            <div className="flex space-x-4">
              <NavButton icon="üí∞" text="–†–∞–±–æ—Ç–∞" />
              <NavButton icon="üìú" text="–ü—Ä–∞–≤–∏–ª–∞" />
              <NavButton icon="‚åÑ" text="–ï—â—ë" />
            </div>
          </div>
          
          <div className="flex flex-col items-center">
            <div className="w-16 h-16 bg-gradient-to-br from-orange-400 to-orange-600 rounded-full shadow-lg mb-2 flex items-center justify-center">
              <span className="text-2xl font-bold text-white">S</span>
            </div>
            <h1 className="text-xl font-bold text-white">Spice Market</h1>
          </div>
        </div>
      </header>

      <div className="w-full max-w-md mb-6 flex flex-col gap-2 sm:flex-row sm:justify-between">
        <button className="bg-orange-600 hover:bg-orange-700 text-white w-full sm:w-auto px-4 py-2 rounded-lg shadow-md transition-colors">–í–æ–π—Ç–∏</button>
        <button className="bg-orange-600 hover:bg-orange-700 text-white w-full sm:w-auto px-4 py-2 rounded-lg shadow-md transition-colors">–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è</button>
        <button className="bg-gray-800 hover:bg-gray-700 text-white w-full sm:w-auto px-4 py-2 rounded-lg shadow-md transition-colors">–ú–µ–Ω—é</button>
      </div>

      {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫ —Å –≤–æ–ª–Ω–æ–π */}
      <div className="w-full mb-6 p-4 bg-gradient-to-r from-orange-100 to-orange-50 rounded-xl shadow-lg">
        <div className="flex justify-center">
          <div className="w-[300px] h-[200px] flex items-center justify-center">
            <p className={`text-center text-gray-800 text-lg font-medium transition-all duration-1000 ${animate ? 'opacity-100 translate-y-0' : 'opacity-0 translate-y-4'}`}>
              {phrases[currentPhrase]}
            </p>
          </div>
        </div>
      </div>

      {/* –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
      <div className="w-full mb-4 p-4 bg-orange-500 rounded-lg shadow-md">
        <h2 className="text-lg font-bold mb-3 text-center text-white">–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥</h2>
        <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 lg:grid-cols-6 gap-2">
          {allCities.map((city) => (
            <button
              key={city}
              onClick={() => handleCityClick(city)}
              className={`p-2 rounded-md text-sm transition-colors ${selectedCity === city ? 
                'bg-black text-white shadow-inner' : 
                'bg-orange-100 text-orange-800 hover:bg-orange-200 shadow'}`}
            >
              {city}
            </button>
          ))}
        </div>
      </div>

      {/* –ë–ª–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ */}
      {showProducts && selectedCity && (
        <div className="w-full max-w-md mb-4">
          {products.map((product) => (
            <div key={product.id} className="flex items-center justify-between p-3 mb-2 bg-white rounded-lg shadow-md border border-orange-100">
              <div className="text-2xl mr-3">{product.logo}</div>
              <div className="flex-grow">
                <h3 className="font-bold text-gray-800">{product.name}</h3>
                <div className="flex justify-between">
                  <span className="text-orange-600 font-bold">{product.price}</span>
                  <span className={`text-sm ${product.available ? 'text-green-600' : 'text-red-600'}`}>
                    {product.available ? '–ï—Å—Ç—å' : '–ù–µ—Ç'}
                  </span>
                </div>
              </div>
              <button
                onClick={() => handleBuyClick(product)}
                disabled={!product.available}
                className={`ml-3 px-4 py-2 rounded-lg shadow-md transition-colors ${product.available ? 
                  'bg-orange-600 hover:bg-orange-700 text-white' : 
                  'bg-gray-300 text-gray-500 cursor-not-allowed'}`}
              >
                –ö—É–ø–∏—Ç—å
              </button>
            </div>
          ))}
        </div>
      )}

      {/* –ë–ª–æ–∫ —Ä–∞–π–æ–Ω–æ–≤ */}
      {showDistricts && selectedCity && selectedProduct && (
        <div className="w-full max-w-md mb-6 p-4 bg-orange-50 rounded-lg shadow-md border border-orange-200">
          <h3 className="font-bold text-gray-800 mb-2">–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –≤ {selectedCity}:</h3>
          <div className="grid grid-cols-2 gap-2">
            {cityDistricts[selectedCity]?.map((district) => (
              <button
                key={district}
                onClick={() => navigate("/payment")}
                className="p-2 bg-orange-100 hover:bg-orange-200 text-orange-800 rounded-md text-sm transition-colors"
              >
                {district}
              </button>
            ))}
          </div>
        </div>
      )}

      <footer className="w-full bg-gradient-to-r from-gray-800 to-orange-600 p-4 mt-8 text-center text-white rounded-lg shadow-xl">
        ¬© 2025 Spice Market - –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã
      </footer>
    </div>
  );
}

function NavButton({ icon, text }) {
  return (
    <button className="flex items-center space-x-1 text-white hover:text-orange-200 transition-colors">
      <span>{icon}</span>
      <span className="text-sm font-medium">{text}</span>
    </button>
  );
}

export default MainPage;
